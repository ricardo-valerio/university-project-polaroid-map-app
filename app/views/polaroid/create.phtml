<?php $this->flashSession->output(); ?>

<div class="row panel">
	<form action="<?php echo $this->url->get("/create-polaroid"); ?>" accept-charset="utf-8" method="post">
	<!-- <form action="http://polaroid-map-app.t.proxylocal.com/polaroid-map-app/create-polaroid"
	      accept-charset="utf-8"
	      method="post"> -->

		<div class="row text-center">

			<!-- large-6 small-12 medium-6 text-center small-centered columns panel   -->
			<div style="background-color: white;"
			     class="large-6 columns panel">

				<input type="hidden"
				       name="<?php echo $this->security->getTokenKey() ?>"
				       value="<?php echo $this->security->getToken() ?>">

				<img id="polaroid_to_edit"
				     src="public/img/polaroids/<?php echo $this->session->get("photo_name");?>">

				<input type='image' src='http://images.aviary.com/images/edit-photo.png'
				       value='Edit photo'
				       onclick="return launchEditor('polaroid_to_edit',
					       'http://polaroid-map-app.t.proxylocal.com/polaroid-map-app/public/img/polaroids/<?php echo $this->session->get("photo_name"); ?>');"/>

				<input id="polaroid_location"
				       name="polaroid_location"
				       type="hidden"
				       value="public/img/polaroids/<?php echo $this->session->get("photo_name");?>"/>

				<div class="panel">
					<input type="text"
					       id="polaroid_title"
					       name="polaroid_title"
					       class="text-center"
					       placeholder="insert the polaroid's title..."/>

					<hr/>
						<textarea style="resize: none;"
						          name="polaroid_description"
						          id="polaroid_description"
						          class="text-center"
						          placeholder="insert the polaroid's description..."
						          cols="30"
						          rows="5"></textarea>
				</div>
			</div>
			<div style="background-color: white;"
			     class="large-6 columns panel">
				<input id="pac-input" class="controls" type="text" placeholder="Search Box">
				<div id="map-canvas"></div>
				<input type="hidden" name="lat_lon_id" id="lat_lon_id"/>
				<input type="hidden" name="lat" id="lat"/>
				<input type="hidden" name="lon" id="lon"/>
				<input type="hidden" name="polaroid_country" id="polaroid_country"/>
			</div>
		</div>
		<div class="row text-center">
			<input type="submit" class="button success expand"
			       value="Upload Polaroid"/>
		</div>
	</form>
</div>

<script>

function initialize() {

	var markers = [];
	window.map_here = new google.maps.Map(document.getElementById
	('map-canvas'), {
		mapTypeId: google.maps.MapTypeId.SATELLITE,
		zoom: 6,
		panControl: false,
		zoomControl: true,
		scaleControl: true
	});

	var defaultBounds = new google.maps.LatLngBounds(
		new google.maps.LatLng(-33.8902, 151.1759),
		new google.maps.LatLng(-33.8474, 151.2631));
	map_here.fitBounds(defaultBounds);

	// Create the search box and link it to the UI element.
	var input = /** @type {HTMLInputElement} */(
		document.getElementById('pac-input'));
	map_here.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

	var searchBox = new google.maps.places.SearchBox(
		/** @type {HTMLInputElement} */(input));

	// Listen for the event fired when the user selects an item from the
	// pick list. Retrieve the matching places for that item.
	google.maps.event.addListener(searchBox, 'places_changed', function () {
		var places = searchBox.getPlaces();

		if (places.length == 0) {
			return;
		}
		for (var i = 0, marker; marker = markers[i]; i++) {
			marker.setMap(null);
		}

		// For each place, get the icon, place name, and location.
		markers = [];
		var bounds = new google.maps.LatLngBounds();
		for (var i = 0, place; place = places[i]; i++) {
			var image = {
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(25, 25)
			};

			// Create a marker for each place.
			 window.myMarker = new google.maps.Marker({
				map: map_here,
				icon: image,
				draggable: true,
				title: place.name,
				position: place.geometry.location
			});

			/**
			 * encontrar o país onde está o marker e colocar num dos inputs
			 */
			for (var i = 0; i < place.address_components.length; i++) {
				if(place.address_components[i].types[0] == "country"
				   || place.address_components[i].types[1] == "country")
					document.getElementById("polaroid_country").value = place
						.address_components[i].long_name;
//				console.log("Country: " + place.address_components[i].long_name);
			}

//			console.log("Location: " + place.geometry.location);
//			console.log("Lat: " + place.geometry.location.lat());
//			console.log("Lat: " + place.geometry.location.lng());

			/**
			 * colocar a lat e lon do marker nos inputs
			 */
			document.getElementById("lat_lon_id").value = place.geometry.location.lat() + "|" +
														  place.geometry.location.lng();

			document.getElementById("lat").value = place.geometry.location.lat();
			document.getElementById("lon").value = place.geometry.location.lng();


			markers.push(window.myMarker);
			bounds.extend(place.geometry.location);
		}

		map_here.fitBounds(bounds);

		/**
		 * listener para quando o marker é movido
		 * e de seguida mudar as posições da lat e lon
		 */
		google.maps.event.addListener(window.myMarker, 'dragend', function (evt) {
//			console.log("O marker foi movido!");
			document.getElementById("lat_lon_id").value = evt.latLng.lat() + "|" +
			evt.latLng.lng();
			document.getElementById("lat").value = evt.latLng.lat();
			document.getElementById("lon").value = evt.latLng.lng();
			map_here.setCenter(window.myMarker.position);
		});

	});


	// Bias the SearchBox results towards places that are within the bounds of the
	// current map's viewport.
	google.maps.event.addListener(map_here, 'bounds_changed', function () {
		var bounds = map_here.getBounds();
		searchBox.setBounds(bounds);
	});
}

google.maps.event.addDomListener(window, 'load', initialize);

</script>
<script type="text/javascript">

	function stopRKey(evt) {
		var evt = (evt) ? evt : ((event) ? event : null);
		var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
		if ((evt.keyCode == 13) && (node.type == "text")) {
			return false;
		}
	}

	document.onkeypress = stopRKey;

</script>
